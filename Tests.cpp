#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <bitset>
#include <algorithm>
#include <limits>
#include <list>
#include "Source1.hpp"

//функция сброса значения
void reset(BigInt& k) {
	k.n = 0;
	k.s = '0';
	k.neg = false;
}

//функция логических испытаний
void test(BigInt& a, BigInt& b) {
	if (a == b) cout << "== True\n";
	else cout << "== False\n";

	if (a != b) cout << "!= True\n";
	else cout << "!= False\n";

	if (a < b) cout << "< True\n";
	else cout << "< False\n";

	if (a > b) cout << "> True\n";
	else cout << "> False\n";

	if (a <= b) cout << "<= True\n";
	else cout << "<= False\n";

	if (a >= b) cout << ">= True\n";
	else cout << ">= False\n";
}

int main() {
	string u;

	setlocale(LC_ALL, "Russian");

	cin >> u;

	if (u == "tests") {
		cout << "ТЕСТЫ С ЦЕЛОЧИСЛЕННЫМИ ЗНАЧЕНИЯМИ И ВНЕКЛАССОВЫМИ МЕТОДАМИ:\n\n";
		//ТЕСТЫ С ЦЕЛОЧИСЛЕННЫМИ ЗНАЧЕНИЯМИ И ВНЕКЛАССОВЫМИ МЕТОДАМИ

		BigInt a(1190323);
		BigInt b(8372164);
		BigInt c(1832459);
		BigInt d(700);

		a = d; //присваивание класса

		d.~BigInt(); //удаление класса

		a = b;
		a = a; //присваивание самому себе

		a.n = 1190323;
		a.s = "1190323";

		d = a + b + c; //оператор сложения
		cout << d << " оператор сложения" << '\n';
		reset(d); //сброс значения
		cout << d << " сброс значения" << '\n';

		d = a - b - c; //оператор вычитания
		cout << d << " оператор вычитания" << '\n';

		d = a * b; //оператор умножения
		cout << d << " оператор умножения" << '\n';

		d = a / b / c; //оператор деления
		cout << d << " оператор деления" << '\n';
		reset(d);
		d = a / d;
		cout << d << " деление на ноль" << '\n';

		d = a ^ b ^ c; //оператор исключающего побитового сложения
		cout << d << " оператор исключающего побитового сложения" << '\n';

		d = b % a; //оператор остатка
		cout << d << " оператор остатка" << '\n';

		d = a & b & c; //оператор побитового умножения
		cout << d << " оператор побитового умножения" << '\n';

		d = a | b | c; //оператор побитового или
		cout << d << " оператор побитового или" << '\n';

		cout << '\n';

		cout << "При d = " << d << " и a = " << a << " результаты теста: \n";
		test(d, a);

		d = a;
		cout << '\n';

		cout << "При d = " << d << " и a = " << a << " результаты теста: \n";
		test(d, a);

		cout << '\n';

		cout << "a = " << a << '\n';
		cout << "С унарным плюсом a = " << +a << '\n';
		cout << "С унарным минусом a = " << -a << '\n';

		cout << '\n';

		cout << "a = " << a << '\n' << "Под побитовым отрицанием a = " << ~a << endl;

		cout << "\n";

		//ТЕСТЫ СО СТРОКОВЫМИ ЗНАЧЕНИЯМИ И ВНУТРИКЛАССОВЫМИ ФУНКЦИЯМИ
		cout << "ТЕСТЫ СО СТРОКОВЫМИ ЗНАЧЕНИЯМИ И ВНУТРИКЛАССОВЫМИ МЕТОДАМИ:\n\n";

		string s = "28493012";
		cout << "При s = " << s << ":\n";
		BigInt e(s); //определение переменной с использованием строки
		if (s != e.s) cout << "Строка была успешно преобразована в целочисленный тип" << endl;
		else cout << "Был введён недопустимый формат для преобразования" << endl;

		s = "48h1jsd4";
		cout << "При s = " << s << ":\n";
		BigInt f(s); //определение переменной с использованием строки с буквами (выдаёт ошибку)
		if (s != e.s) cout << "Строка была успешно преобразована в целочисленный тип" << endl;
		else cout << "Был введён недопустимый формат для преобразования" << endl;

		cout << '\n';

		BigInt g("15");
		BigInt h("20");

		g += h; //Длинное сложение без переноса
		cout << g << " Длинное сложение без переноса\n";

		h.n = 7;
		h.s = '7';

		g += h; //длинное сложение с переносом
		cout << g << " Длинное сложение с переносом\n";

		++g; //инкремент
		cout << g << " Инкремент\n";

		h.n = 2;
		h.s = '2';

		g -= h; //Длинное вычитание без переноса
		cout << g << " Длинное вычитание без переноса\n";

		g -= h; //Длинное вычитание с переносом
		cout << g << " Длинное вычитание с переносом\n";

		--g; //декремент
		cout << g << " Декремент\n";

		h.n = 21;
		h.s = "21";
		g *= h; //умножение двузначного числа на двузначное
		cout << g << " умножение двузначного числа на двузначное" << endl;

		h.n = 351;
		h.s = "351";
		g *= h; //умножение трёхзначного числа на трёхзначное
		cout << g << " умножение трёхзначного числа на трёхзначное" << endl;

		BigInt i("240"), j("5");

		i /= j; //деление двухзначного числа на цифру
		cout << i << " деление двухзначного числа на цифру" << endl;

		i.n = 320;
		i.s = "320";

		j.n = 160;
		j.s = "160";

		i /= j; //деление чисел одинаковой разрядности
		cout << i << " деление чисел одинаковой разрядности" << endl;

		i /= j; //деление меньшего числа на большее
		cout << i << " деление меньшего числа на большее" << endl;

		//ТЕСТЫ НА ОЧЕНЬ ДЛИННУЮ АРИФМЕТИКУ
		cout << "ТЕСТЫ НА ОЧЕНЬ ДЛИННУЮ АРИФМЕТИКУ:\n\n";

		BigInt k("323345237657362876234587389481797982347"), l("293847321");

		k += l;
		cout << k << " Проверка длинного сложения на очень больших числах" << endl;

		k *= l;
		cout << k << " Проверка длинного умножения на очень больших числах" << endl;

		k /= l;
		cout << k << " Проверка длинного деления на очень больших числах" << endl;

		k -= l;
		cout << k << " Проверка длинного вычитания на очень больших числах" << endl;

		k %= l;
		cout << k << " Проверка остатка от длинного деления на очень больших числах" << endl;

		k ^= l;
		cout << k << " Проверка исключающего побитового сложения на очень больших числах" << endl;

		k |= l;
		cout << k << " Проверка побитового сложения на очень больших числах" << endl;

		k &= l;
		cout << k << " Проверка побитового умножения на очень больших числах" << endl;

		BigInt m("-2"), n("-4");

		m |= n;
		cout << m << endl;

		m &= n;
		cout << m << endl;
	}
	if (u == "add") {
		BigInt ss("738838388383838383883883838383"), pp("-9773737738738833888773838939394994939939"), ans("-9773737737999995500390000555511111101556");
		cout << ss + pp << endl;
		cout << ((ss + pp) == ans) << endl;

		ss.neg = true, pp.neg = false, ans.neg = false;
		cout << ss + pp << endl;
		cout << ((ss + pp) == ans) << endl;

		ss.neg = true, pp.neg = true, ans.s = "9773737739477672277157677323278878778322", ans.neg = true;
		cout << ss + pp << endl;
		cout << ((ss + pp) == ans) << endl;
	}
	if (u == "div") {
		BigInt ss("738838388383838383883883838383"), pp("9773737738738833888773838939394994939939"), ans1("0"), ans2("13228519108"), ans3("-1"), ans4("-13228519108");
		cout << pp / ss << ' ' << ss / pp << endl;
		cout << ((ss / pp) == ans1) << ' ' << ((pp / ss) == ans2) << endl;

		ss.neg = true, pp.neg = false;
		cout << pp / ss << ' ' << ss / pp << endl;
		cout << ((ss / pp) == ans3) << ' ' << ((pp / ss) == ans4) << endl;

		ss.neg = false, pp.neg = true;
		cout << pp / ss << ' ' << ss / pp << endl;
		cout << ((ss / pp) == ans3) << ' ' << ((pp / ss) == ans4) << endl;

		ss.neg = true, pp.neg = true;
		cout << pp / ss << ' ' << ss / pp << endl;
		cout << ((ss / pp) == ans1) << ' ' << ((pp / ss) == ans2) << endl;
	}
	if (u == "mod") {
		BigInt ss("738838388383838383883883838383"), pp("9773737738738833888773838939394994939939");

		cout << ss % pp << ' ' << pp % ss << endl;

		ss.neg = true, pp.neg = false;
		cout << ss % pp << ' ' << pp % ss << endl;

		ss.neg = true, pp.neg = true;
		cout << ss % pp << ' ' << pp % ss << endl;
	}
}